
%{
	#include <stdio.h>
	#include <stdlib.h>
	#include "./lib/TabSimbolo.h"

	int yylex();
%}

%token COMENT-ETERNO
%token COMENT-LINHA
%token COMENT-BLOCO
%token PALAVRA-CHAVE
%token LITERAL
%token LETRA
%token DIGITO
%token CHAR

%token INT
%token FLOAT
%token NUM
%token ID

%token SEPARADORES
%token SEPARA-ARG
%token ACESSO-MEMB
%token ACESSO-END
%token FIM-EXPRESS

%token INI-SUBESCRIT
%token FIM-SUBESCRIT
%token INI-PARAM
%token FIM-PARAM
%token INI-INSTRUC
%token FIM-INSTRUC

%token RELOP
%token ATROP
%token ADDOP
%token MULOP

%token EOL
%token ERRO


%%


PROGRAMA:
			LISTA-DECL EOL;

LISTA-DECL:
			LISTA-DECL DECLARACAO | DECLARACAO;

DECLARACAO:
			DECL-VAR | DECL-FUNC;

DECL-VAR:
			TIPO-ESPECIF ID FIM-EXPRESS | TIPO-ESPECIF ID INI-SUBESCRIT INT FIM-SUBESCRIT FIM-EXPRESS;

DECL-FUNC:
			TIPO-ESPECIF ID INI-PARAM PARAMS FIM-PARAM INSTRUC-COMPOSTA;

TIPO-ESPECIF:
			int|float|char|shape|point;

PARAMS:
			LISTA-PARAM | ;





<LISTA-PARAM>â†’<LISTA-PARAM><SEPARA-ARG><PARAMS>|<PARAMS>
<PARAM>â†’<TIPO-ESPECIF>ID|<TIPO-ESPECIF>ID<INI-SUBESCRIT><FIM-SUBESCRIT>
<INSTRUC-COMPOSTA>â†’<INI-INSTRUC><DECL-LOCAL><LISTA-INSTRUC><FIM-INSTRUC>
<DECL-LOCAL>â†’<DECL-LOCAL> <DECL-VAR>|
<LISTA-INSTRUC>â†’<LISTA-INSTRUC> <INSTRUCAO>|<INSTRUCAO>â†’<INSTRUC-EXPRESS>|<INSTRUC-COMPOSTA>|<INSTRUC-COND>|<INSTRUC-ITERAC>|<INSTRUC-RETURN>
<INSTRUC-EXPR>â†’<EXPRESSAO> <FIM-EXPRESS>|<FIM-EXPRESS>
<INSTRUC-COND>â†’if<INI-PARAM><EXPRESSAO><FIM-PARAM><INI-INSTRUC><INSTRUCAO><FIM-INSTRUC>|if<INI-PARAM><EXPRESSAO><FIM-PARAM> <INI-INSTRUC> <INSTRUCAO> <FIM-INSTRUC>else<INI-INSTRUC> <INSTRUCAO> <FIM-INSTRUC>
<INSTRUC-ITERAC>â†’for<INI-PARAM><EXPRESSAO><FIM-EXPRESS><EXPRESS-SIMP><FIM-EXPRESS><EXPRESSAO><FIM-PARAM><INI-INSTRUC><INSTRUCAO> <FIM-INSTRUC>
<INSTRUC-RETURN>â†’return<EXPRESSAO> <FIM-EXPRESS>
<EXPRESSAO>â†’<VAR> <ATROP> <EXPRESSAO>|<EXPRESS-SIMP>
<VAR>â†’ID|ID<INI-SUBESCRIT> <EXPRESSAO> <FIM-SUBESCRIT>
<EXPRESS-SIMP>â†’<EXPRESS-SOMA> <RELOP> <EXPRESS-SOMA>|<EXPRESS-SOMA>
<EXPRESS-SOMA>â†’<EXPRESS-SOMA><ADDOP><TERMO>|<TERMO><TERMO>â†’<TERMO> <MULOP> <FACTOR>|<FACTOR><FACTOR>â†’<INI-PARAM> <EXPRESSAO> <FIM-PARAM>|<ACESS-END>â€”<VAR>|<CHAMADA>|<NUM>|<CHAR>|<LITERAL>
<ADDOP>â†’+|âˆ’
<MULOP>â†’ âˆ—|/
<CHAMADA>â†’ID<INI-PARAM> <ARG> <FIM-PARAM>
<ARG>â†’<LISTA-ARG>|
<LISTA-ARG>â†’<LISTA-ARG><SEPARA-ARG><EXPRESSAO>|<EXPRESSAO>
<ATROP>â†’=|+=|-=|*=|/=|%=
<RELOP>â†’<|>|!|==|!=|<=|>=|&&|||
<LETRA>â†’a|b|c|d|...|x|y|z|A|B|C|D|...|X|Y|Z
<DIGITO>â†’0|1|2|3|4|5|6|7|8|9
<NUM>â†’INT|FLOAT
<CHAR>â†’<INI-CHAR>CARACTERE<FIM-CHAR>
<INI-SUBESCRIT>â†’[
<FIM-SUBESCRIT>â†’]
<INI-PARAM>â†’(
<FIM-PARAMC>â†’)
<INI-INSTRUC>â†’ {
<FIM-INSTRUC>â†’ }
<INI-STRING>â†’"
<FIM-STRING>â†’"
<INI-CHAR>â†’'
<FIM-CHAR>â†’'
<ACESS-MEMB>â†’.|->
<ACESS-END>â†’&<VAR>
<FIM-EXPRESS>â†’;
<SEPARA-ARG>â†’,

CARACTERE=.
INT=<DIGITO>+
FLOAT=INT"."<DIGITO>+( (e|E)(-|+) )?<DIGITO>âˆ—
LITERAL="CARACTEREâˆ—"
ID=<LETRA>|(<LETRA>|<DIGITO>|)




%%


int main(){
	yyparse();
	return 0;
}